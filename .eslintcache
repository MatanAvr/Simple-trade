[{"C:\\Users\\Matan\\SimpleTrade\\src\\index.js":"1","C:\\Users\\Matan\\SimpleTrade\\src\\App.js":"2","C:\\Users\\Matan\\SimpleTrade\\src\\store\\auth-context.js":"3","C:\\Users\\Matan\\SimpleTrade\\src\\components\\Auth\\AuthForm.js":"4","C:\\Users\\Matan\\SimpleTrade\\src\\components\\Layout\\MainScreen.js":"5","C:\\Users\\Matan\\SimpleTrade\\src\\components\\Layout\\Header.js":"6","C:\\Users\\Matan\\SimpleTrade\\src\\components\\UI\\Button.js":"7","C:\\Users\\Matan\\SimpleTrade\\src\\components\\Layout\\Footer.js":"8","C:\\Users\\Matan\\SimpleTrade\\src\\components\\UI\\LoadingSpinner.js":"9","C:\\Users\\Matan\\SimpleTrade\\src\\components\\User\\Portfolio.js":"10","C:\\Users\\Matan\\SimpleTrade\\src\\components\\User\\PortfolioItem.js":"11","C:\\Users\\Matan\\SimpleTrade\\src\\components\\Layout\\TradeScreen.js":"12","C:\\Users\\Matan\\SimpleTrade\\src\\components\\User\\Leaderboard.js":"13","C:\\Users\\Matan\\SimpleTrade\\src\\components\\User\\Explanation.js":"14","C:\\Users\\Matan\\SimpleTrade\\src\\components\\User\\LeaderboardItem.js":"15","C:\\Users\\Matan\\SimpleTrade\\src\\components\\UI\\Modal.js":"16","C:\\Users\\Matan\\SimpleTrade\\src\\components\\Layout\\TradeForm.js":"17","C:\\Users\\Matan\\SimpleTrade\\src\\components\\UI\\Dropdown.js":"18","C:\\Users\\Matan\\SimpleTrade\\src\\components\\UI\\Search.js":"19","C:\\Users\\Matan\\SimpleTrade\\src\\store\\stocksArr.js":"20","C:\\Users\\Matan\\SimpleTrade\\src\\components\\UI\\Graph.js":"21","C:\\Users\\Matan\\SimpleTrade\\src\\components\\User\\PortfolioWithUpdate.js":"22","C:\\Users\\Matan\\SimpleTrade\\src\\components\\Auth\\SignIn.js":"23","C:\\Users\\Matan\\SimpleTrade\\src\\components\\Layout\\MainScreenMUI.js":"24"},{"size":322,"mtime":1658154243140,"results":"25","hashOfConfig":"26"},{"size":656,"mtime":1660476282297,"results":"27","hashOfConfig":"26"},{"size":8575,"mtime":1660475252812,"results":"28","hashOfConfig":"26"},{"size":8997,"mtime":1660476210496,"results":"29","hashOfConfig":"26"},{"size":2160,"mtime":1659271270945,"results":"30","hashOfConfig":"26"},{"size":1948,"mtime":1660477910858,"results":"31","hashOfConfig":"26"},{"size":697,"mtime":1658751594133,"results":"32","hashOfConfig":"26"},{"size":339,"mtime":1658751384544,"results":"33","hashOfConfig":"26"},{"size":366,"mtime":1658651766242,"results":"34","hashOfConfig":"26"},{"size":836,"mtime":1658735528380,"results":"35","hashOfConfig":"26"},{"size":742,"mtime":1658735827410,"results":"36","hashOfConfig":"26"},{"size":2387,"mtime":1659270697501,"results":"37","hashOfConfig":"26"},{"size":1474,"mtime":1659270697505,"results":"38","hashOfConfig":"26"},{"size":1089,"mtime":1659271171484,"results":"39","hashOfConfig":"26"},{"size":982,"mtime":1659173504700,"results":"40","hashOfConfig":"26"},{"size":801,"mtime":1659258370079,"results":"41","hashOfConfig":"26"},{"size":4871,"mtime":1659255145718,"results":"42","hashOfConfig":"26"},{"size":444,"mtime":1659265554332,"results":"43","hashOfConfig":"26"},{"size":3509,"mtime":1659295062834,"results":"44","hashOfConfig":"26"},{"size":91669,"mtime":1659258179658,"results":"45","hashOfConfig":"26"},{"size":2758,"mtime":1658768263373,"results":"46","hashOfConfig":"26"},{"size":2083,"mtime":1659270697509,"results":"47","hashOfConfig":"26"},{"size":4562,"mtime":1659443465686,"results":"48","hashOfConfig":"26"},{"size":2160,"mtime":1660476234344,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"pxdjgp",{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"52"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"52"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"52"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"52"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"52"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"52"},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"52"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Matan\\SimpleTrade\\src\\index.js",[],["106","107"],"C:\\Users\\Matan\\SimpleTrade\\src\\App.js",[],"C:\\Users\\Matan\\SimpleTrade\\src\\store\\auth-context.js",[],"C:\\Users\\Matan\\SimpleTrade\\src\\components\\Auth\\AuthForm.js",["108","109","110","111","112"],"C:\\Users\\Matan\\SimpleTrade\\src\\components\\Layout\\MainScreen.js",["113","114"],"import React, { useState, useContext, useEffect } from \"react\";\r\nimport classes from \"./MainScreen.module.css\";\r\nimport Header from \"./Header\";\r\nimport Portfolio from \"../User/Portfolio\";\r\nimport Explanation from \"../User/Explanation\";\r\nimport Footer from \"./Footer\";\r\nimport AuthContext from \"../../store/auth-context\";\r\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\r\nimport TradeScreen from \"./TradeScreen\";\r\nimport Leaderboard from \"../User/Leaderboard\";\r\nimport Search from \"../UI/Search\";\r\nimport Modal from \"../UI/Modal\";\r\nimport Button from \"../UI/Button\";\r\n\r\nconst MainScreen = () => {\r\n  const authCtx = useContext(AuthContext);\r\n  const [showModal, setShowModal] = useState(false);\r\n\r\n  useEffect(() => {\r\n    isLoddegIn();\r\n    setTimeout(authCtx.loadLeaderboard, 500);\r\n  }, []);\r\n\r\n  const isLoddegIn = () => {};\r\n\r\n  const modalHandler = () => {\r\n    authCtx.toggleError();\r\n  };\r\n\r\n  return (\r\n    <div className={classes.container}>\r\n      {showModal || authCtx.error ? (\r\n        <Modal onClose={modalHandler}>\r\n          <p>\r\n            {authCtx.errorMsg ? authCtx.errorMsg : \"Something went wrong\"}\r\n            <br /> Please try again :)\r\n          </p>\r\n          <Button title=\"Close\" onClick={modalHandler} />\r\n        </Modal>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      <Header />\r\n      <div className={classes.upperCard}>\r\n        {authCtx.userData ? (\r\n          <>\r\n            {`Welcome ${authCtx.userData.name}! `}\r\n            <Search />\r\n            {`Available cash: $${authCtx.userData.balance.toFixed(2)}`}\r\n          </>\r\n        ) : (\r\n          <LoadingSpinner />\r\n        )}\r\n      </div>\r\n      <div className={classes.cards}>\r\n        {authCtx.trading.status ? (\r\n          <TradeScreen />\r\n        ) : (\r\n          <>\r\n            <div className={classes.card}>\r\n              <Portfolio />\r\n            </div>\r\n            <div className={classes.card}>\r\n              <Explanation />\r\n            </div>\r\n            <div className={classes.card}>\r\n              <Leaderboard />\r\n            </div>\r\n          </>\r\n        )}\r\n      </div>\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MainScreen;\r\n","C:\\Users\\Matan\\SimpleTrade\\src\\components\\Layout\\Header.js",[],"C:\\Users\\Matan\\SimpleTrade\\src\\components\\UI\\Button.js",[],"C:\\Users\\Matan\\SimpleTrade\\src\\components\\Layout\\Footer.js",[],"C:\\Users\\Matan\\SimpleTrade\\src\\components\\UI\\LoadingSpinner.js",[],"C:\\Users\\Matan\\SimpleTrade\\src\\components\\User\\Portfolio.js",[],"C:\\Users\\Matan\\SimpleTrade\\src\\components\\User\\PortfolioItem.js",[],"C:\\Users\\Matan\\SimpleTrade\\src\\components\\Layout\\TradeScreen.js",["115"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport AuthContext from \"../../store/auth-context\";\r\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\r\nimport classes from \"./TradeScreen.module.css\";\r\nimport Button from \"../UI/Button\";\r\nimport TradeForm from \"./TradeForm\";\r\nimport refreshIcon from \"../../components/img/refresh.png\";\r\nimport Graph from \"../UI/Graph\";\r\n\r\nconst BASE_URL = \"https://simple-trade-israel-dev.herokuapp.com\";\r\n\r\nconst TradeScreen = (props) => {\r\n  const authCtx = useContext(AuthContext);\r\n  const [loading, setLoading] = useState(false);\r\n  const [price, setPrice] = useState(\"\");\r\n  const token = authCtx.token;\r\n\r\n  const currentSymbol = authCtx.trading.symbol;\r\n\r\n  const getQuote = async function () {\r\n    if (currentSymbol === \"\") return;\r\n    setLoading(true);\r\n    const URLextension = \"/portfolio/symbol/\";\r\n    const url = `${BASE_URL}${URLextension}${currentSymbol}`;\r\n\r\n    try {\r\n      const response = await fetch(url, {\r\n        // mode: \"cors\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (!response.ok) {\r\n        setLoading(false);\r\n        authCtx.toggleError(data.error);\r\n        return;\r\n      }\r\n\r\n      setPrice(data.currentPrice);\r\n\r\n      setLoading(false);\r\n    } catch (err) {}\r\n  };\r\n\r\n  useEffect(() => {\r\n    getQuote(currentSymbol);\r\n  }, [currentSymbol]);\r\n\r\n  return (\r\n    <div className={classes.tradeScreen}>\r\n      <Button\r\n        title=\"Go back\"\r\n        onClick={authCtx.loadTradeScreen.bind(null, \"back\")}\r\n      />\r\n      <div className={classes.cards}>\r\n        <div className={classes.card1}>\r\n          <Graph symbol={currentSymbol} />\r\n        </div>\r\n\r\n        <div className={classes.card2}>\r\n          <h2>{`Trade ${currentSymbol}`}</h2>\r\n          {loading ? <LoadingSpinner /> : <p>{`Current price: $${price}`}</p>}\r\n          <Button onClick={getQuote}>\r\n            <img\r\n              alt=\"Refresh\"\r\n              src={refreshIcon}\r\n              height=\"15px\"\r\n              draggable=\"false\"\r\n            />\r\n          </Button>\r\n        </div>\r\n\r\n        <div className={classes.card3}>\r\n          <TradeForm symbol={currentSymbol} price={price} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TradeScreen;\r\n","C:\\Users\\Matan\\SimpleTrade\\src\\components\\User\\Leaderboard.js",[],"C:\\Users\\Matan\\SimpleTrade\\src\\components\\User\\Explanation.js",["116"],"import React from \"react\";\r\nimport classes from \"./Explanation.module.css\";\r\nimport Search from \"../UI/Search\";\r\n\r\nconst Explanation = () => {\r\n  return (\r\n    <div className={classes.middleCard}>\r\n      {/* <u>Start trading!</u>\r\n      <Search showNote={true} />\r\n      <br /> */}\r\n      <p className={classes.p}>\r\n        <u>Explanation</u>\r\n        <br />\r\n        Simple-trade is an educational simplified trading platform, which allows\r\n        you to simulate basic stock trading. You start with 10k$, try to be the\r\n        most profitable trader!\r\n        <br />\r\n        <br />\r\n        On the portfolio card you can see your current holdings: stock symbol,\r\n        quantity, average buy price, and profit/lost.\r\n        <br />\r\n        <br />\r\n        On the leaderboard card you can see a list that shows the users with the\r\n        highest profit in descending order.\r\n        <br />\r\n        <br />\r\n        Use the search bar to look for (autocompleted) real stocks and start\r\n        trading!\r\n      </p>\r\n      <br />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Explanation;\r\n","C:\\Users\\Matan\\SimpleTrade\\src\\components\\User\\LeaderboardItem.js",[],"C:\\Users\\Matan\\SimpleTrade\\src\\components\\UI\\Modal.js",[],"C:\\Users\\Matan\\SimpleTrade\\src\\components\\Layout\\TradeForm.js",["117"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport AuthContext from \"../../store/auth-context\";\r\nimport classes from \"./TradeForm.module.css\";\r\nimport Dropdown from \"../UI/Dropdown\";\r\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\r\nimport Button from \"../UI/Button\";\r\n\r\nconst dropdownOptions = [\r\n  { label: \"Buy\", value: \"buy\" },\r\n  { label: \"Sell\", value: \"sell\" },\r\n];\r\n\r\nconst TradeForm = (props) => {\r\n  const authCtx = useContext(AuthContext);\r\n  const loadingOrder = authCtx.loadingOrder;\r\n  const currentPortfolio = authCtx.portfolio;\r\n  const symbol = props.symbol;\r\n\r\n  const maxQuantity = maxStocksQuantity(currentPortfolio, symbol);\r\n  const [price, setPrice] = useState(0);\r\n  const [quantity, setQuantity] = useState(1);\r\n  const [orderValue, setOrderValue] = useState(100);\r\n  const [orderType, setOrderType] = useState(\"buy\");\r\n  const [errMsg, setErrMsg] = useState(\"\");\r\n  const [init, setInit] = useState(true);\r\n  const [orderSuccess, setOrderSuccess] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setPrice(props.price);\r\n    const currentQuantity = quantity;\r\n    const currentPrice = price;\r\n    setOrderValue((currentQuantity * currentPrice).toFixed(2));\r\n  }, [price, quantity, props]);\r\n\r\n  useEffect(() => {\r\n    if (!init) {\r\n      setOrderSuccess(true);\r\n      setTimeout(() => {\r\n        setOrderSuccess(false);\r\n      }, 2000);\r\n    }\r\n  }, [authCtx.userData.balance]);\r\n\r\n  const quantityChangeHandler = (event) => {\r\n    event.preventDefault();\r\n    let newQuantity = quantity;\r\n    const action = event.target.value;\r\n\r\n    if (isNaN(newQuantity)) alert(\"Plase enter a number\");\r\n    else if (action === \"+\") newQuantity++;\r\n    else if (action === \"-\" && newQuantity > 1) newQuantity--;\r\n    else if (action === \"Max\") newQuantity = maxQuantity;\r\n    else if (newQuantity < 1) newQuantity = 1;\r\n\r\n    setQuantity(newQuantity);\r\n  };\r\n\r\n  const submitHandler = async (event) => {\r\n    event.preventDefault();\r\n    setInit(false);\r\n    setErrMsg(\"\");\r\n\r\n    if (quantity < 1 || quantity % 1 !== 0) {\r\n      console.log(quantity & 1);\r\n      errMsgHandler(\"Quantity must be a whole number greater than 0\");\r\n      return;\r\n    }\r\n    if (orderType === \"sell\" && quantity > maxQuantity) {\r\n      errMsgHandler(\"You dont have enough stocks\");\r\n      return;\r\n    }\r\n    if (orderType === \"buy\" && orderValue > authCtx.userData.balance) {\r\n      errMsgHandler(\"You dont have enough balance\");\r\n      return;\r\n    }\r\n    if (!price || price < 0) {\r\n      errMsgHandler(\"Something wrong with the price\");\r\n      return;\r\n    }\r\n    if (!symbol) {\r\n      errMsgHandler(\"Check the symbol\");\r\n      return;\r\n    }\r\n\r\n    authCtx.order(orderType, symbol, quantity, price);\r\n  };\r\n\r\n  const dropdownChangeHandler = (event) => {\r\n    setOrderType(event.target.value);\r\n  };\r\n\r\n  const errMsgHandler = (text = \"Something went wrong\") => {\r\n    setErrMsg(text);\r\n    setTimeout(() => {\r\n      setErrMsg(\"\");\r\n    }, 5000);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={submitHandler} className={classes.orderForm}>\r\n      {`You currently have ${maxQuantity} ${symbol} stocks`}\r\n      <br />\r\n      {`Average buy price: $${averageBuyPrice(currentPortfolio, symbol).toFixed(\r\n        2\r\n      )}`}\r\n      <Dropdown\r\n        label=\"Order Type:\"\r\n        options={dropdownOptions}\r\n        value={orderType}\r\n        onChange={dropdownChangeHandler}\r\n      />\r\n      <label>\r\n        Order quantity:{\" \"}\r\n        <input\r\n          name=\"orderQuantity\"\r\n          value={quantity}\r\n          type=\"number\"\r\n          step=\"1\"\r\n          min=\"1\"\r\n          max=\"10000\"\r\n          onChange={(e) => {\r\n            setQuantity(e.target.value);\r\n          }}\r\n        />\r\n      </label>\r\n      <div className={classes.cards}>\r\n        <Button title=\" - \" value=\"-\" onClick={quantityChangeHandler} />\r\n        <Button title=\" + \" value=\"+\" onClick={quantityChangeHandler} />\r\n        {orderType === \"sell\" ? (\r\n          <Button title=\"Max\" value=\"Max\" onClick={quantityChangeHandler} />\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n      Order value: ${orderValue}\r\n      {errMsg ? <p className={classes.error}>{errMsg}</p> : \"\"}\r\n      {!loadingOrder && !orderSuccess ? (\r\n        <Button title=\"Confirm\" onClick={submitHandler} />\r\n      ) : orderSuccess ? (\r\n        <p className={classes.success}>Order completed successfully </p>\r\n      ) : (\r\n        <LoadingSpinner />\r\n      )}\r\n    </form>\r\n  );\r\n};\r\n\r\nconst maxStocksQuantity = (portfolio, symbol) => {\r\n  const currentStock = portfolio.find((stock) => stock.symbol === symbol);\r\n  if (currentStock) return currentStock.quantity;\r\n  return 0;\r\n};\r\n\r\nconst averageBuyPrice = (portfolio, symbol) => {\r\n  const currentStock = portfolio.find((stock) => stock.symbol === symbol);\r\n  if (currentStock) return currentStock.price;\r\n  return 0;\r\n};\r\n\r\nexport default TradeForm;\r\n","C:\\Users\\Matan\\SimpleTrade\\src\\components\\UI\\Dropdown.js",[],"C:\\Users\\Matan\\SimpleTrade\\src\\components\\UI\\Search.js",[],"C:\\Users\\Matan\\SimpleTrade\\src\\store\\stocksArr.js",[],"C:\\Users\\Matan\\SimpleTrade\\src\\components\\UI\\Graph.js",["118"],"import React, { useState, useContext, useEffect } from \"react\";\r\nimport AuthContext from \"../../store/auth-context\";\r\nimport LoadingSpinner from \"./LoadingSpinner\";\r\nimport classes from \"./Graph.module.css\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from \"chart.js\";\r\nimport Button from \"./Button\";\r\n\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nconst options = {\r\n  maintainAspectRatio: false, // Don't maintain w/h ratio\r\n};\r\n\r\nlet dataSet = {\r\n  labels: [],\r\n  options: {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n  },\r\n  datasets: [\r\n    {\r\n      label: \"Stock price\",\r\n      data: [],\r\n      backgroundColor: \"rgb(0, 99, 132)\",\r\n      borderColor: \"rgb(0, 99, 132)\",\r\n    },\r\n  ],\r\n};\r\n\r\nconst Graph = (props) => {\r\n  const authCtx = useContext(AuthContext);\r\n  const graphLoaded = authCtx.graphLoaded;\r\n  const [currentRange, setCurrentRange] = useState(\"INTRADAY\");\r\n\r\n  useEffect(() => {\r\n    authCtx.loadGraph(props.symbol);\r\n    setCurrentRange(\"INTRADAY\");\r\n  }, [authCtx.trading.symbol]);\r\n\r\n  if (graphLoaded) {\r\n    dataSet.datasets[0].label = props.symbol;\r\n    dataSet.labels = [...authCtx.graphData.time];\r\n    dataSet.datasets[0].data = [...authCtx.graphData.price];\r\n  }\r\n\r\n  const grpahRangeHandler = (newRanage) => {\r\n    if (newRanage === currentRange) return;\r\n    //Range: \"MONTHLY\" / \"WEEKLY\" / \"DAILY\" /\"INTRADAY\"\r\n    setCurrentRange(newRanage);\r\n    authCtx.loadGraph(props.symbol, newRanage);\r\n  };\r\n\r\n  return graphLoaded ? (\r\n    <div className={classes.graphContainer}>\r\n      <div className={classes.graphUI}>\r\n        <Button\r\n          type={currentRange === \"MONTHLY\" ? \"navActive\" : \"\"}\r\n          title=\"Monthly\"\r\n          onClick={grpahRangeHandler.bind(null, \"MONTHLY\")}\r\n        />\r\n        <Button\r\n          type={currentRange === \"WEEKLY\" ? \"navActive\" : \"\"}\r\n          title=\"Weekly\"\r\n          onClick={grpahRangeHandler.bind(null, \"WEEKLY\")}\r\n        />\r\n        <Button\r\n          type={currentRange === \"DAILY\" ? \"navActive\" : \"\"}\r\n          title=\"Day\"\r\n          onClick={grpahRangeHandler.bind(null, \"DAILY\")}\r\n        />\r\n        <Button\r\n          type={currentRange === \"INTRADAY\" ? \"navActive\" : \"\"}\r\n          title=\"Interday\"\r\n          onClick={grpahRangeHandler.bind(null, \"INTRADAY\")}\r\n        />\r\n      </div>\r\n      <div className={classes.chart}>\r\n        <Line data={dataSet} options={options} />\r\n      </div>\r\n    </div>\r\n  ) : props.symbol ? (\r\n    <LoadingSpinner />\r\n  ) : (\r\n    <h2>Search a stock and start trading!</h2>\r\n  );\r\n};\r\n\r\nexport default Graph;\r\n","C:\\Users\\Matan\\SimpleTrade\\src\\components\\User\\PortfolioWithUpdate.js",["119"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport AuthContext from \"../../store/auth-context\";\r\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\r\nimport classes from \"./PortfolioWithUpdate.module.css\";\r\n\r\nconst BASE_URL = \"https://simple-trade-israel-dev.herokuapp.com\";\r\n\r\nconst PortfolioWithUpdate = (props) => {\r\n  const authCtx = useContext(AuthContext);\r\n  const token = authCtx.token;\r\n  const [currentPrice, setCurrentPrice] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n  const currentSymbol = props.item.symbol;\r\n\r\n  const getCurrentPrice = async function () {\r\n    if (currentSymbol === \"\") return;\r\n    setLoading(true);\r\n    const URLextension = \"/portfolio/symbol/\";\r\n    const url = `${BASE_URL}${URLextension}${currentSymbol}`;\r\n\r\n    try {\r\n      const response = await fetch(url, {\r\n        // mode: \"cors\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      });\r\n      if (!response.ok) {\r\n        setLoading(false);\r\n        setCurrentPrice(\"FAILED\");\r\n        return;\r\n      }\r\n      const data = await response.json();\r\n      const pl = (\r\n        ((data.currentPrice - props.item.price) / props.item.price) *\r\n        100\r\n      ).toFixed(2);\r\n\r\n      setLoading(false);\r\n      setCurrentPrice(pl);\r\n    } catch (err) {\r\n      return;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getCurrentPrice(currentSymbol);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {`${props.item.symbol}, Qty: ${props.item.quantity},\r\n  average buy price: $${props.item.price.toFixed(2)}`}\r\n      {loading ? (\r\n        <LoadingSpinner size=\"small\" />\r\n      ) : (\r\n        <div>\r\n          {\" \"}\r\n          P/L:\r\n          <span\r\n            className={\r\n              currentPrice > 0\r\n                ? classes.green\r\n                : currentPrice < 0\r\n                ? classes.red\r\n                : \"\"\r\n            }\r\n          >\r\n            {currentPrice}%\r\n          </span>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PortfolioWithUpdate;\r\n","C:\\Users\\Matan\\SimpleTrade\\src\\components\\Auth\\SignIn.js",["120"],"import * as React from \"react\";\r\nimport { useState } from \"react\";\r\nimport Avatar from \"@mui/material/Avatar\";\r\nimport Button from \"@mui/material/Button\";\r\nimport CssBaseline from \"@mui/material/CssBaseline\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\nimport Link from \"@mui/material/Link\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Box from \"@mui/material/Box\";\r\nimport LockOutlinedIcon from \"@mui/icons-material/LockOutlined\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Container from \"@mui/material/Container\";\r\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\r\nimport LoadingButton from \"@mui/lab/LoadingButton\";\r\nimport SendIcon from \"@mui/icons-material/Send\";\r\n\r\nfunction Copyright(props) {\r\n  return (\r\n    <Typography\r\n      variant=\"body2\"\r\n      color=\"text.secondary\"\r\n      align=\"center\"\r\n      {...props}\r\n    >\r\n      {\"Copyright © \"}\r\n      <Link color=\"inherit\">Simple trade</Link> {new Date().getFullYear()}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nconst theme = createTheme();\r\n\r\nexport default function SignIn(props) {\r\n  const [signinForm, setSigninForm] = useState(true);\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    const data = new FormData(event.currentTarget);\r\n    props.submitHandler(data);\r\n    console.log({\r\n      email: data.get(\"email\"),\r\n      password: data.get(\"password\"),\r\n    });\r\n  };\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <Container component=\"main\" maxWidth=\"xs\">\r\n        <CssBaseline />\r\n        <Box\r\n          sx={{\r\n            marginTop: 8,\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            alignItems: \"center\",\r\n            border: \"1px solid grey\",\r\n            borderRadius: 3,\r\n            padding: 3,\r\n          }}\r\n        >\r\n          <Avatar sx={{ m: 1, bgcolor: \"secondary.main\" }}>\r\n            <LockOutlinedIcon />\r\n          </Avatar>\r\n          <Typography component=\"h1\" variant=\"h5\">\r\n            {signinForm ? \"Sign in\" : \"Sign up\"}\r\n          </Typography>\r\n          <Box\r\n            component=\"form\"\r\n            onSubmit={handleSubmit}\r\n            noValidate\r\n            sx={{ mt: 1 }}\r\n          >\r\n            <TextField\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              id=\"email\"\r\n              label=\"Email Address\"\r\n              name=\"email\"\r\n              autoComplete=\"email\"\r\n              autoFocus\r\n            />\r\n            {signinForm ? (\r\n              \"\"\r\n            ) : (\r\n              <TextField\r\n                margin=\"normal\"\r\n                required\r\n                fullWidth\r\n                name=\"name\"\r\n                label=\"name\"\r\n                type=\"text\"\r\n                id=\"name\"\r\n                autoComplete=\"current-name\"\r\n              />\r\n            )}\r\n            <TextField\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              name=\"password\"\r\n              label=\"Password\"\r\n              type=\"password\"\r\n              id=\"password\"\r\n              autoComplete=\"current-password\"\r\n            />\r\n            <FormControlLabel\r\n              control={<Checkbox value=\"remember\" color=\"primary\" />}\r\n              label=\"Remember me\"\r\n            />\r\n            <LoadingButton\r\n              type=\"submit\"\r\n              sx={{ mt: 3, mb: 2 }}\r\n              // onClick={handleClick}\r\n              fullWidth\r\n              endIcon={<SendIcon />}\r\n              // loading={loading}\r\n              loadingPosition=\"end\"\r\n              variant=\"contained\"\r\n            >\r\n              {signinForm ? \"Sign In\" : \"Sign up\"}\r\n            </LoadingButton>\r\n            <Grid container>\r\n              {/* <Grid item xs>\r\n                <Link href=\"#\" variant=\"body2\">\r\n                  Forgot password?\r\n                </Link>\r\n              </Grid>\r\n              <Grid item> */}\r\n              <Link\r\n                href=\"#\"\r\n                variant=\"body2\"\r\n                onClick={() => {\r\n                  setSigninForm(!signinForm);\r\n                }}\r\n              >\r\n                {signinForm\r\n                  ? \"Don't have an account? Sign Up\"\r\n                  : \"Already have an account? Sign in\"}\r\n              </Link>\r\n              {/* </Grid> */}\r\n            </Grid>\r\n          </Box>\r\n        </Box>\r\n        <Copyright sx={{ mt: 8, mb: 4 }} />\r\n      </Container>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n","C:\\Users\\Matan\\SimpleTrade\\src\\components\\Layout\\MainScreenMUI.js",["121","122"],{"ruleId":"123","replacedBy":"124"},{"ruleId":"125","replacedBy":"126"},{"ruleId":"127","severity":1,"message":"128","line":59,"column":10,"nodeType":"129","messageId":"130","endLine":59,"endColumn":19},{"ruleId":"127","severity":1,"message":"131","line":65,"column":11,"nodeType":"129","messageId":"130","endLine":65,"endColumn":15},{"ruleId":"127","severity":1,"message":"132","line":95,"column":9,"nodeType":"129","messageId":"130","endLine":95,"endColumn":28},{"ruleId":"127","severity":1,"message":"133","line":101,"column":9,"nodeType":"129","messageId":"130","endLine":101,"endColumn":21},{"ruleId":"134","severity":1,"message":"135","line":130,"column":13,"nodeType":"136","endLine":130,"endColumn":58},{"ruleId":"127","severity":1,"message":"137","line":17,"column":21,"nodeType":"129","messageId":"130","endLine":17,"endColumn":33},{"ruleId":"138","severity":1,"message":"139","line":22,"column":6,"nodeType":"140","endLine":22,"endColumn":8,"suggestions":"141"},{"ruleId":"138","severity":1,"message":"142","line":51,"column":6,"nodeType":"140","endLine":51,"endColumn":21,"suggestions":"143"},{"ruleId":"127","severity":1,"message":"144","line":3,"column":8,"nodeType":"129","messageId":"130","endLine":3,"endColumn":14},{"ruleId":"138","severity":1,"message":"145","line":42,"column":6,"nodeType":"140","endLine":42,"endColumn":32,"suggestions":"146"},{"ruleId":"138","severity":1,"message":"147","line":56,"column":6,"nodeType":"140","endLine":56,"endColumn":30,"suggestions":"148"},{"ruleId":"138","severity":1,"message":"149","line":49,"column":6,"nodeType":"140","endLine":49,"endColumn":8,"suggestions":"150"},{"ruleId":"127","severity":1,"message":"151","line":4,"column":8,"nodeType":"129","messageId":"130","endLine":4,"endColumn":14},{"ruleId":"127","severity":1,"message":"137","line":17,"column":21,"nodeType":"129","messageId":"130","endLine":17,"endColumn":33},{"ruleId":"138","severity":1,"message":"139","line":22,"column":6,"nodeType":"140","endLine":22,"endColumn":8,"suggestions":"152"},"no-native-reassign",["153"],"no-negated-in-lhs",["154"],"no-unused-vars","'showModal' is assigned a value but never used.","Identifier","unusedVar","'data' is assigned a value but never used.","'signinToggleHanlder' is assigned a value but never used.","'modalHandler' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'setShowModal' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'authCtx.loadLeaderboard'. Either include it or remove the dependency array.","ArrayExpression",["155"],"React Hook useEffect has a missing dependency: 'getQuote'. Either include it or remove the dependency array.",["156"],"'Search' is defined but never used.","React Hook useEffect has a missing dependency: 'init'. Either include it or remove the dependency array.",["157"],"React Hook useEffect has missing dependencies: 'authCtx' and 'props.symbol'. Either include them or remove the dependency array.",["158"],"React Hook useEffect has missing dependencies: 'currentSymbol' and 'getCurrentPrice'. Either include them or remove the dependency array.",["159"],"'Button' is defined but never used.",["160"],"no-global-assign","no-unsafe-negation",{"desc":"161","fix":"162"},{"desc":"163","fix":"164"},{"desc":"165","fix":"166"},{"desc":"167","fix":"168"},{"desc":"169","fix":"170"},{"desc":"161","fix":"171"},"Update the dependencies array to be: [authCtx.loadLeaderboard]",{"range":"172","text":"173"},"Update the dependencies array to be: [currentSymbol, getQuote]",{"range":"174","text":"175"},"Update the dependencies array to be: [authCtx.userData.balance, init]",{"range":"176","text":"177"},"Update the dependencies array to be: [authCtx, authCtx.trading.symbol, props.symbol]",{"range":"178","text":"179"},"Update the dependencies array to be: [currentSymbol, getCurrentPrice]",{"range":"180","text":"181"},{"range":"182","text":"173"},[792,794],"[authCtx.loadLeaderboard]",[1467,1482],"[currentSymbol, getQuote]",[1397,1423],"[authCtx.userData.balance, init]",[1202,1226],"[authCtx, authCtx.trading.symbol, props.symbol]",[1461,1463],"[currentSymbol, getCurrentPrice]",[792,794]]