[
  {
    "C:\\Users\\Matan\\SimpleTrade\\src\\index.js": "1",
    "C:\\Users\\Matan\\SimpleTrade\\src\\App.js": "2",
    "C:\\Users\\Matan\\SimpleTrade\\src\\store\\auth-context.js": "3",
    "C:\\Users\\Matan\\SimpleTrade\\src\\components\\Auth\\AuthForm.js": "4",
    "C:\\Users\\Matan\\SimpleTrade\\src\\components\\Layout\\Header.js": "5",
    "C:\\Users\\Matan\\SimpleTrade\\src\\components\\UI\\Button.js": "6",
    "C:\\Users\\Matan\\SimpleTrade\\src\\components\\Layout\\Footer.js": "7",
    "C:\\Users\\Matan\\SimpleTrade\\src\\components\\UI\\LoadingSpinner.js": "8",
    "C:\\Users\\Matan\\SimpleTrade\\src\\components\\Layout\\TradeScreen.js": "9",
    "C:\\Users\\Matan\\SimpleTrade\\src\\components\\User\\Leaderboard.js": "10",
    "C:\\Users\\Matan\\SimpleTrade\\src\\components\\User\\Explanation.js": "11",
    "C:\\Users\\Matan\\SimpleTrade\\src\\components\\User\\LeaderboardItem.js": "12",
    "C:\\Users\\Matan\\SimpleTrade\\src\\components\\UI\\Modal.js": "13",
    "C:\\Users\\Matan\\SimpleTrade\\src\\components\\Layout\\TradeForm.js": "14",
    "C:\\Users\\Matan\\SimpleTrade\\src\\components\\UI\\Dropdown.js": "15",
    "C:\\Users\\Matan\\SimpleTrade\\src\\components\\UI\\Search.js": "16",
    "C:\\Users\\Matan\\SimpleTrade\\src\\store\\stocksArr.js": "17",
    "C:\\Users\\Matan\\SimpleTrade\\src\\components\\UI\\Graph.js": "18",
    "C:\\Users\\Matan\\SimpleTrade\\src\\components\\Layout\\MainScreenMUI.js": "19",
    "C:\\Users\\Matan\\SimpleTrade\\src\\components\\User\\PortfolioMUI.js": "20",
    "C:\\Users\\Matan\\SimpleTrade\\src\\components\\User\\PortfolioItemMUI.js": "21"
  },
  {
    "size": 322,
    "mtime": 1658154243140,
    "results": "22",
    "hashOfConfig": "23"
  },
  {
    "size": 596,
    "mtime": 1660575622581,
    "results": "24",
    "hashOfConfig": "23"
  },
  {
    "size": 8713,
    "mtime": 1660575596454,
    "results": "25",
    "hashOfConfig": "23"
  },
  {
    "size": 8419,
    "mtime": 1660576216930,
    "results": "26",
    "hashOfConfig": "23"
  },
  {
    "size": 2207,
    "mtime": 1660575168637,
    "results": "27",
    "hashOfConfig": "23"
  },
  {
    "size": 697,
    "mtime": 1660547394555,
    "results": "28",
    "hashOfConfig": "23"
  },
  {
    "size": 505,
    "mtime": 1660546038669,
    "results": "29",
    "hashOfConfig": "23"
  },
  {
    "size": 366,
    "mtime": 1658651766242,
    "results": "30",
    "hashOfConfig": "23"
  },
  {
    "size": 2622,
    "mtime": 1660642613610,
    "results": "31",
    "hashOfConfig": "23"
  },
  {
    "size": 1631,
    "mtime": 1660636984458,
    "results": "32",
    "hashOfConfig": "23"
  },
  {
    "size": 1058,
    "mtime": 1660637053238,
    "results": "33",
    "hashOfConfig": "23"
  },
  {
    "size": 2341,
    "mtime": 1660563625597,
    "results": "34",
    "hashOfConfig": "23"
  },
  {
    "size": 801,
    "mtime": 1659258370079,
    "results": "35",
    "hashOfConfig": "23"
  },
  {
    "size": 6185,
    "mtime": 1660575230027,
    "results": "36",
    "hashOfConfig": "23"
  },
  {
    "size": 444,
    "mtime": 1659265554332,
    "results": "37",
    "hashOfConfig": "23"
  },
  {
    "size": 2870,
    "mtime": 1660637131159,
    "results": "38",
    "hashOfConfig": "23"
  },
  {
    "size": 91669,
    "mtime": 1659258179658,
    "results": "39",
    "hashOfConfig": "23"
  },
  {
    "size": 3487,
    "mtime": 1660575290937,
    "results": "40",
    "hashOfConfig": "23"
  },
  {
    "size": 2508,
    "mtime": 1660575208884,
    "results": "41",
    "hashOfConfig": "23"
  },
  {
    "size": 2585,
    "mtime": 1660641630647,
    "results": "42",
    "hashOfConfig": "23"
  },
  {
    "size": 2665,
    "mtime": 1660575395574,
    "results": "43",
    "hashOfConfig": "23"
  },
  {
    "filePath": "44",
    "messages": "45",
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "46"
  },
  "pxdjgp",
  {
    "filePath": "47",
    "messages": "48",
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "46"
  },
  {
    "filePath": "49",
    "messages": "50",
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "46"
  },
  {
    "filePath": "51",
    "messages": "52",
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "46"
  },
  {
    "filePath": "53",
    "messages": "54",
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "46"
  },
  {
    "filePath": "55",
    "messages": "56",
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0
  },
  {
    "filePath": "57",
    "messages": "58",
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "46"
  },
  {
    "filePath": "59",
    "messages": "60",
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "46"
  },
  {
    "filePath": "61",
    "messages": "62",
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "63"
  },
  {
    "filePath": "64",
    "messages": "65",
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "46"
  },
  {
    "filePath": "66",
    "messages": "67",
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "46"
  },
  {
    "filePath": "68",
    "messages": "69",
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "46"
  },
  {
    "filePath": "70",
    "messages": "71",
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "46"
  },
  {
    "filePath": "72",
    "messages": "73",
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "74",
    "usedDeprecatedRules": "46"
  },
  {
    "filePath": "75",
    "messages": "76",
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "77"
  },
  {
    "filePath": "78",
    "messages": "79",
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "80",
    "usedDeprecatedRules": "46"
  },
  {
    "filePath": "81",
    "messages": "82",
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "46"
  },
  {
    "filePath": "83",
    "messages": "84",
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "85",
    "usedDeprecatedRules": "46"
  },
  {
    "filePath": "86",
    "messages": "87",
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "88",
    "usedDeprecatedRules": "46"
  },
  {
    "filePath": "89",
    "messages": "90",
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": "46"
  },
  {
    "filePath": "91",
    "messages": "92",
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "93",
    "usedDeprecatedRules": "46"
  },
  "C:\\Users\\Matan\\SimpleTrade\\src\\index.js",
  [],
  [
    "94",
    "95"
  ],
  "C:\\Users\\Matan\\SimpleTrade\\src\\App.js",
  [],
  "C:\\Users\\Matan\\SimpleTrade\\src\\store\\auth-context.js",
  [],
  "C:\\Users\\Matan\\SimpleTrade\\src\\components\\Auth\\AuthForm.js",
  [],
  "C:\\Users\\Matan\\SimpleTrade\\src\\components\\Layout\\Header.js",
  [],
  "C:\\Users\\Matan\\SimpleTrade\\src\\components\\UI\\Button.js",
  [],
  "C:\\Users\\Matan\\SimpleTrade\\src\\components\\Layout\\Footer.js",
  [],
  "C:\\Users\\Matan\\SimpleTrade\\src\\components\\UI\\LoadingSpinner.js",
  [],
  "C:\\Users\\Matan\\SimpleTrade\\src\\components\\Layout\\TradeScreen.js",
  [
    "96"
  ],
  "import React, { useState, useEffect, useContext } from \"react\";\r\nimport AuthContext from \"../../store/auth-context\";\r\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\r\nimport classes from \"./TradeScreen.module.css\";\r\nimport Button from \"@mui/material/Button\";\r\nimport TradeForm from \"./TradeForm\";\r\nimport RefreshIcon from \"@mui/icons-material/Refresh\";\r\nimport Graph from \"../UI/Graph\";\r\nimport Typography from \"@mui/material/Typography\";\r\n\r\nconst BASE_URL = \"https://simple-trade-israel-dev.herokuapp.com\";\r\n\r\nconst TradeScreen = (props) => {\r\n  const authCtx = useContext(AuthContext);\r\n  const [loading, setLoading] = useState(false);\r\n  const [price, setPrice] = useState(\"\");\r\n  const token = authCtx.token;\r\n\r\n  const currentSymbol = authCtx.trading.symbol;\r\n\r\n  const getQuote = async function () {\r\n    if (currentSymbol === \"\") return;\r\n    setLoading(true);\r\n    const URLextension = \"/portfolio/symbol/\";\r\n    const url = `${BASE_URL}${URLextension}${currentSymbol}`;\r\n\r\n    try {\r\n      const response = await fetch(url, {\r\n        // mode: \"cors\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (!response.ok) {\r\n        setLoading(false);\r\n        authCtx.toggleError(data.error);\r\n        return;\r\n      }\r\n      setPrice(data.currentPrice);\r\n      setLoading(false);\r\n    } catch (err) {\r\n      authCtx.toggleError(err);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getQuote(currentSymbol);\r\n  }, [currentSymbol]);\r\n\r\n  return (\r\n    <div className={classes.tradeScreen}>\r\n      <Button\r\n        style={{ textTransform: \"none\", width: \"100%\", alignSelf: \"center\" }}\r\n        size=\"small\"\r\n        variant=\"outlined\"\r\n        onClick={authCtx.loadTradeScreen.bind(null, \"back\")}\r\n      >\r\n        Go back\r\n      </Button>\r\n      <div className={classes.cards}>\r\n        <div className={classes.card1}>\r\n          <Graph symbol={currentSymbol} />\r\n        </div>\r\n\r\n        <div className={classes.card2}>\r\n          <Typography variant=\"h5\">{`Trade ${currentSymbol}`}</Typography>\r\n\r\n          {loading ? (\r\n            <LoadingSpinner />\r\n          ) : (\r\n            <Typography>{`Current price: $${price}`}</Typography>\r\n          )}\r\n          <Button onClick={getQuote} variant=\"outlined\" size=\"small\">\r\n            <RefreshIcon />\r\n          </Button>\r\n        </div>\r\n\r\n        <div className={classes.card3}>\r\n          <TradeForm symbol={currentSymbol} price={price} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TradeScreen;\r\n",
  "C:\\Users\\Matan\\SimpleTrade\\src\\components\\User\\Leaderboard.js",
  [],
  "C:\\Users\\Matan\\SimpleTrade\\src\\components\\User\\Explanation.js",
  [],
  "C:\\Users\\Matan\\SimpleTrade\\src\\components\\User\\LeaderboardItem.js",
  [],
  "C:\\Users\\Matan\\SimpleTrade\\src\\components\\UI\\Modal.js",
  [],
  "C:\\Users\\Matan\\SimpleTrade\\src\\components\\Layout\\TradeForm.js",
  [
    "97"
  ],
  "import React, { useState, useEffect, useContext } from \"react\";\r\nimport AuthContext from \"../../store/auth-context\";\r\nimport classes from \"./TradeForm.module.css\";\r\nimport Button from \"@mui/material/Button\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\nimport RemoveIcon from \"@mui/icons-material/Remove\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Alert from \"@mui/material/Alert\";\r\nimport LoadingButton from \"@mui/lab/LoadingButton\";\r\nimport InputLabel from \"@mui/material/InputLabel\";\r\nimport MenuItem from \"@mui/material/MenuItem\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport Select from \"@mui/material/Select\";\r\nimport ButtonGroup from \"@mui/material/ButtonGroup\";\r\n\r\nconst TradeForm = (props) => {\r\n  const authCtx = useContext(AuthContext);\r\n  const loadingOrder = authCtx.loadingOrder;\r\n  const currentPortfolio = authCtx.portfolio;\r\n  const symbol = props.symbol;\r\n\r\n  const maxQuantity = maxStocksQuantity(currentPortfolio, symbol);\r\n  const [price, setPrice] = useState(0);\r\n  const [quantity, setQuantity] = useState(1);\r\n  const [orderValue, setOrderValue] = useState(100);\r\n  const [orderType, setOrderType] = useState(\"buy\");\r\n  const [errMsg, setErrMsg] = useState(\"\");\r\n  const [init, setInit] = useState(true);\r\n  const [orderSuccess, setOrderSuccess] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setPrice(props.price);\r\n    const currentQuantity = quantity;\r\n    const currentPrice = price;\r\n    setOrderValue((currentQuantity * currentPrice).toFixed(2));\r\n  }, [price, quantity, props]);\r\n\r\n  useEffect(() => {\r\n    if (!init) {\r\n      setOrderSuccess(true);\r\n      setTimeout(() => {\r\n        setOrderSuccess(false);\r\n      }, 2000);\r\n    }\r\n  }, [authCtx.userData.balance]);\r\n\r\n  const quantityChangeHandler = (event) => {\r\n    event.preventDefault();\r\n    let newQuantity = quantity;\r\n    const action = event.currentTarget.value;\r\n\r\n    if (isNaN(newQuantity)) alert(\"Plase enter a number\");\r\n    else if (action === \"+\") newQuantity++;\r\n    else if (action === \"-\" && newQuantity > 1) newQuantity--;\r\n    else if (action === \"Max\") newQuantity = maxQuantity;\r\n    else if (newQuantity < 1) newQuantity = 1;\r\n\r\n    setQuantity(newQuantity);\r\n  };\r\n\r\n  const submitHandler = async (event) => {\r\n    event.preventDefault();\r\n    setInit(false);\r\n    setErrMsg(\"\");\r\n\r\n    if (quantity < 1 || quantity % 1 !== 0) {\r\n      console.log(quantity & 1);\r\n      errMsgHandler(\"Quantity must be a whole number greater than 0\");\r\n      return;\r\n    }\r\n    if (orderType === \"sell\" && quantity > maxQuantity) {\r\n      errMsgHandler(\"You dont have enough stocks\");\r\n      return;\r\n    }\r\n    if (orderType === \"buy\" && orderValue > authCtx.userData.balance) {\r\n      errMsgHandler(\"You dont have enough balance\");\r\n      return;\r\n    }\r\n    if (!price || price < 0) {\r\n      errMsgHandler(\"Something wrong with the price\");\r\n      return;\r\n    }\r\n    if (!symbol) {\r\n      errMsgHandler(\"Check the symbol\");\r\n      return;\r\n    }\r\n\r\n    authCtx.order(orderType, symbol, quantity, price);\r\n  };\r\n\r\n  const dropdownChangeHandler = (event) => {\r\n    setOrderType(event.target.value);\r\n  };\r\n\r\n  const errMsgHandler = (text = \"Something went wrong\") => {\r\n    setErrMsg(text);\r\n    setTimeout(() => {\r\n      setErrMsg(\"\");\r\n    }, 5000);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={submitHandler} className={classes.orderForm}>\r\n      <Typography>\r\n        {`You currently have ${maxQuantity} ${symbol} stocks`}\r\n        <br />\r\n        {`Average buy price: $${averageBuyPrice(\r\n          currentPortfolio,\r\n          symbol\r\n        ).toFixed(2)}`}\r\n      </Typography>\r\n\r\n      <Typography component={\"span\"}>\r\n        <FormControl sx={{ m: 1, minWidth: 120 }} size=\"small\">\r\n          <InputLabel>Order type</InputLabel>\r\n          <Select\r\n            value={orderType}\r\n            label=\"orderType\"\r\n            onChange={dropdownChangeHandler}\r\n          >\r\n            <MenuItem value={\"buy\"}>Buy</MenuItem>\r\n            <MenuItem value={\"sell\"}>Sell</MenuItem>\r\n          </Select>\r\n        </FormControl>\r\n      </Typography>\r\n\r\n      <Typography component=\"span\">\r\n        Order quantity:{\" \"}\r\n        <input\r\n          name=\"orderQuantity\"\r\n          value={quantity}\r\n          type=\"number\"\r\n          step=\"1\"\r\n          min=\"1\"\r\n          max=\"10000\"\r\n          onChange={(e) => {\r\n            setQuantity(e.target.value);\r\n          }}\r\n        />\r\n        <br />\r\n        <ButtonGroup size=\"small\" sx={{ height: \"25px\", marginTop: \"10px\" }}>\r\n          <Button\r\n            color=\"primary\"\r\n            size=\"small\"\r\n            value=\"-\"\r\n            onClick={quantityChangeHandler}\r\n          >\r\n            <RemoveIcon />\r\n          </Button>\r\n          <Button\r\n            color=\"primary\"\r\n            size=\"small\"\r\n            value=\"+\"\r\n            onClick={quantityChangeHandler}\r\n          >\r\n            <AddIcon />\r\n          </Button>\r\n          {orderType === \"sell\" ? (\r\n            <Button size=\"small\" value=\"Max\" onClick={quantityChangeHandler}>\r\n              Max\r\n            </Button>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </ButtonGroup>\r\n      </Typography>\r\n      <Typography>\r\n        Order value: ${orderValue}\r\n        {errMsg ? <Alert severity=\"error\">{errMsg}</Alert> : \"\"}\r\n      </Typography>\r\n      <Typography>\r\n        {!orderSuccess ? (\r\n          <LoadingButton\r\n            style={{ textTransform: \"none\" }}\r\n            size=\"small\"\r\n            variant=\"outlined\"\r\n            loading={loadingOrder}\r\n            onClick={submitHandler}\r\n          >\r\n            Confirm\r\n          </LoadingButton>\r\n        ) : (\r\n          <Alert severity=\"success\">Order completed successfully </Alert>\r\n        )}\r\n      </Typography>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst maxStocksQuantity = (portfolio, symbol) => {\r\n  const currentStock = portfolio.find((stock) => stock.symbol === symbol);\r\n  if (currentStock) return currentStock.quantity;\r\n  return 0;\r\n};\r\n\r\nconst averageBuyPrice = (portfolio, symbol) => {\r\n  const currentStock = portfolio.find((stock) => stock.symbol === symbol);\r\n  if (currentStock) return currentStock.price;\r\n  return 0;\r\n};\r\n\r\nexport default TradeForm;\r\n",
  "C:\\Users\\Matan\\SimpleTrade\\src\\components\\UI\\Dropdown.js",
  [],
  [
    "98",
    "99"
  ],
  "C:\\Users\\Matan\\SimpleTrade\\src\\components\\UI\\Search.js",
  [
    "100",
    "101"
  ],
  "import React, { useState, useContext, useEffect } from \"react\";\r\nimport AuthContext from \"../../store/auth-context\";\r\n// import classes from \"./Search.module.css\";\r\n// import searchIcon from \"../img/search.png\";\r\n// import IconButton from \"@mui/material/IconButton\";\r\n// import SearchIcon from \"@mui/icons-material/Search\";\r\n// import Button from \"./Button\";\r\nimport stocksArr from \"../../store/stocksArr\";\r\nimport Autocomplete from \"@mui/material/Autocomplete\";\r\nimport TextField from \"@mui/material/TextField\";\r\n\r\nconst english = /^[A-Za-z]*$/;\r\n\r\nconst Search = (props) => {\r\n  const authCtx = useContext(AuthContext);\r\n  const [symbol, setSymbol] = useState(\"\");\r\n  const [stocksList, setStocksList] = useState([]);\r\n  const [showModalOnce, setShowModalOnce] = useState(true);\r\n  const [inputError, setInputError] = useState(false);\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n  // const showNote = props.showNote ? true : false;\r\n  // useEffect(() => {});\r\n\r\n  const updateStockList = (stockName) => {\r\n    const rawList = stocksArr.filter(\r\n      (element) => element.slice(0, stockName.length) === stockName\r\n    );\r\n    const newList = rawList.slice(0, 5);\r\n    setStocksList(newList);\r\n  };\r\n\r\n  let timer;\r\n\r\n  const changeHandler = (event, value) => {\r\n    // event.preventDefault();\r\n    setInputError(false);\r\n    if (!english.test(value)) {\r\n      setInputError(true);\r\n      if (showModalOnce) {\r\n        authCtx.toggleError(\"Valid characters: A-Z/a-z\");\r\n        setShowModalOnce(false);\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (!value || value.trim().length === 0) {\r\n      setSymbol(value);\r\n      return;\r\n    }\r\n\r\n    if (\r\n      value &&\r\n      (event?.type === \"submit\" ||\r\n        event?.type === \"keydown\" ||\r\n        event?.type === \"click\")\r\n    ) {\r\n      authCtx.loadTradeScreen(value);\r\n      setSymbol(\"\");\r\n      setInputValue(\"\");\r\n      setStocksList([]);\r\n      return;\r\n    }\r\n\r\n    if (timer) clearTimeout(timer); //clear existing timer\r\n\r\n    timer = setTimeout(() => {\r\n      updateStockList(value?.toUpperCase());\r\n    }, 50);\r\n\r\n    setSymbol(value);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Autocomplete\r\n        size=\"small\"\r\n        id=\"stocksList\"\r\n        options={stocksList}\r\n        sx={{ width: 250 }}\r\n        value={symbol}\r\n        inputValue={inputValue}\r\n        autoComplete={true}\r\n        autoSelect={true}\r\n        isOptionEqualToValue={(option, value) => option === value}\r\n        onChange={(event, value) => {\r\n          changeHandler(event, value);\r\n        }}\r\n        onInputChange={(event, value) => {\r\n          setInputValue(value.toUpperCase());\r\n          updateStockList(value.toUpperCase());\r\n        }}\r\n        renderInput={(stocksList) => (\r\n          <TextField size=\"small\" {...stocksList} label=\"Search for a stock\" />\r\n        )}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n",
  "C:\\Users\\Matan\\SimpleTrade\\src\\store\\stocksArr.js",
  [],
  "C:\\Users\\Matan\\SimpleTrade\\src\\components\\UI\\Graph.js",
  [
    "102"
  ],
  "import React, { useState, useContext, useEffect } from \"react\";\r\nimport AuthContext from \"../../store/auth-context\";\r\nimport Button from \"@mui/material/Button\";\r\nimport ButtonGroup from \"@mui/material/ButtonGroup\";\r\nimport LoadingSpinner from \"./LoadingSpinner\";\r\nimport classes from \"./Graph.module.css\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from \"chart.js\";\r\nimport { Typography } from \"@mui/material\";\r\n\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nconst options = {\r\n  maintainAspectRatio: false, // Don't maintain w/h ratio\r\n};\r\n\r\nlet dataSet = {\r\n  labels: [],\r\n  options: {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n  },\r\n  datasets: [\r\n    {\r\n      label: \"Stock price\",\r\n      data: [],\r\n      backgroundColor: \"rgb(25,118,210)\",\r\n      borderColor: \"rgb(25,118,210)\",\r\n    },\r\n  ],\r\n};\r\n\r\nconst Graph = (props) => {\r\n  const authCtx = useContext(AuthContext);\r\n  const graphLoaded = authCtx.graphLoaded;\r\n  const [currentRange, setCurrentRange] = useState(\"INTRADAY\");\r\n\r\n  useEffect(() => {\r\n    authCtx.loadGraph(props.symbol);\r\n    setCurrentRange(\"INTRADAY\");\r\n  }, [authCtx.trading.symbol]);\r\n\r\n  if (graphLoaded) {\r\n    dataSet.datasets[0].label = props.symbol;\r\n    dataSet.labels = [...authCtx.graphData.time];\r\n    dataSet.datasets[0].data = [...authCtx.graphData.price];\r\n  }\r\n\r\n  const grpahRangeHandler = (newRanage) => {\r\n    if (newRanage === currentRange) return;\r\n    //Range: \"MONTHLY\" / \"WEEKLY\" / \"DAILY\" /\"INTRADAY\"\r\n    setCurrentRange(newRanage);\r\n    authCtx.loadGraph(props.symbol, newRanage);\r\n  };\r\n\r\n  return graphLoaded ? (\r\n    <div className={classes.graphContainer}>\r\n      <div className={classes.graphUI}>\r\n        <ButtonGroup variant=\"outlined\">\r\n          <Button\r\n            style={{ textTransform: \"none\" }}\r\n            size=\"small\"\r\n            variant={currentRange === \"MONTHLY\" ? \"contained\" : \"outlined\"}\r\n            title=\"Monthly\"\r\n            onClick={grpahRangeHandler.bind(null, \"MONTHLY\")}\r\n          >\r\n            Monthly\r\n          </Button>\r\n          <Button\r\n            style={{ textTransform: \"none\" }}\r\n            size=\"small\"\r\n            variant={currentRange === \"WEEKLY\" ? \"contained\" : \"outlined\"}\r\n            title=\"Weekly\"\r\n            onClick={grpahRangeHandler.bind(null, \"WEEKLY\")}\r\n          >\r\n            Weekly\r\n          </Button>\r\n          <Button\r\n            style={{ textTransform: \"none\" }}\r\n            size=\"small\"\r\n            variant={currentRange === \"DAILY\" ? \"contained\" : \"outlined\"}\r\n            title=\"Day\"\r\n            onClick={grpahRangeHandler.bind(null, \"DAILY\")}\r\n          >\r\n            Day\r\n          </Button>\r\n          <Button\r\n            style={{ textTransform: \"none\" }}\r\n            size=\"small\"\r\n            variant={currentRange === \"INTRADAY\" ? \"contained\" : \"outlined\"}\r\n            title=\"Interday\"\r\n            onClick={grpahRangeHandler.bind(null, \"INTRADAY\")}\r\n          >\r\n            Interday\r\n          </Button>\r\n        </ButtonGroup>\r\n      </div>\r\n      <div className={classes.chart}>\r\n        <Line data={dataSet} options={options} />\r\n      </div>\r\n    </div>\r\n  ) : props.symbol ? (\r\n    <LoadingSpinner />\r\n  ) : (\r\n    <Typography>Search a stock and start trading!</Typography>\r\n  );\r\n};\r\n\r\nexport default Graph;\r\n",
  "C:\\Users\\Matan\\SimpleTrade\\src\\components\\Layout\\MainScreenMUI.js",
  [
    "103",
    "104"
  ],
  "import React, { useState, useContext, useEffect } from \"react\";\r\nimport classes from \"./MainScreen.module.css\";\r\nimport Header from \"./Header\";\r\nimport PortfolioMUI from \"../User/PortfolioMUI\";\r\nimport Explanation from \"../User/Explanation\";\r\nimport Footer from \"./Footer\";\r\nimport AuthContext from \"../../store/auth-context\";\r\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\r\nimport TradeScreen from \"./TradeScreen\";\r\nimport Leaderboard from \"../User/Leaderboard\";\r\nimport Search from \"../UI/Search\";\r\nimport Modal from \"../UI/Modal\";\r\nimport { Button } from \"@mui/material\";\r\nimport Typography from \"@mui/material/Typography\";\r\n\r\nconst MainScreen = () => {\r\n  const authCtx = useContext(AuthContext);\r\n  const [showModal, setShowModal] = useState(false);\r\n\r\n  useEffect(() => {\r\n    isLoddegIn();\r\n    setTimeout(authCtx.loadLeaderboard, 500);\r\n  }, []);\r\n\r\n  const isLoddegIn = () => {};\r\n\r\n  const modalHandler = () => {\r\n    authCtx.toggleError();\r\n  };\r\n\r\n  return (\r\n    <div className={classes.container}>\r\n      {showModal || authCtx.error ? (\r\n        <Modal onClose={modalHandler}>\r\n          <Typography>\r\n            {authCtx.errorMsg ? authCtx.errorMsg : \"Something went wrong\"}\r\n            <br /> Please try again :) <br />\r\n          </Typography>\r\n          <Button\r\n            style={{ textTransform: \"none\", marginTop: \"20px\" }}\r\n            size=\"small\"\r\n            variant=\"outlined\"\r\n            onClick={modalHandler}\r\n          >\r\n            Confirm\r\n          </Button>\r\n        </Modal>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      <Header />\r\n      <div className={classes.upperCard}>\r\n        {authCtx.userData ? (\r\n          <>\r\n            <Typography>Welcome {authCtx.userData.name}!</Typography>\r\n\r\n            <Search />\r\n\r\n            <Typography>\r\n              Available cash: {authCtx.userData.balance.toFixed(2)}$\r\n            </Typography>\r\n          </>\r\n        ) : (\r\n          <LoadingSpinner />\r\n        )}\r\n      </div>\r\n      <div className={classes.cards}>\r\n        {authCtx.trading.status ? (\r\n          <TradeScreen />\r\n        ) : (\r\n          <>\r\n            <div className={classes.portfoliocard}>\r\n              <PortfolioMUI />\r\n            </div>\r\n            <div className={classes.card}>\r\n              <Explanation />\r\n            </div>\r\n            <div className={classes.card}>\r\n              <Leaderboard />\r\n            </div>\r\n          </>\r\n        )}\r\n      </div>\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MainScreen;\r\n",
  "C:\\Users\\Matan\\SimpleTrade\\src\\components\\User\\PortfolioMUI.js",
  [],
  "C:\\Users\\Matan\\SimpleTrade\\src\\components\\User\\PortfolioItemMUI.js",
  [
    "105"
  ],
  "import React, { useState, useEffect, useContext } from \"react\";\r\nimport AuthContext from \"../../store/auth-context\";\r\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\r\nimport TableRow from \"@mui/material/TableRow\";\r\nimport TableCell from \"@mui/material/TableCell\";\r\nimport { Button, Chip } from \"@mui/material\";\r\nimport DoubleArrowIcon from \"@mui/icons-material/DoubleArrow\";\r\n\r\nconst BASE_URL = \"https://simple-trade-israel-dev.herokuapp.com\";\r\n\r\nconst PortfolioItemMUI = (props) => {\r\n  const authCtx = useContext(AuthContext);\r\n  const token = authCtx.token;\r\n  const [currentPrice, setCurrentPrice] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n  const currentSymbol = props.item.symbol;\r\n\r\n  const getCurrentPrice = async function () {\r\n    if (currentSymbol === \"\") return;\r\n    setLoading(true);\r\n    const URLextension = \"/portfolio/symbol/\";\r\n    const url = `${BASE_URL}${URLextension}${currentSymbol}`;\r\n\r\n    try {\r\n      const response = await fetch(url, {\r\n        // mode: \"cors\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      });\r\n      if (!response.ok) {\r\n        setLoading(false);\r\n        setCurrentPrice(\"FAILED\");\r\n        return;\r\n      }\r\n      const data = await response.json();\r\n      const pl = (\r\n        ((data.currentPrice - props.item.price) / props.item.price) *\r\n        100\r\n      ).toFixed(2);\r\n\r\n      setLoading(false);\r\n      setCurrentPrice(pl);\r\n    } catch (err) {\r\n      return;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getCurrentPrice(currentSymbol);\r\n  }, []);\r\n  const backgroundColor = props.index % 2 === 0 ? \"rgba(25,118,210,0.2)\" : \"\";\r\n  return (\r\n    <TableRow key={props.item._id} style={{ backgroundColor: backgroundColor }}>\r\n      <TableCell align=\"center\">{props.item.symbol}</TableCell>\r\n      <TableCell align=\"center\">{props.item.quantity}</TableCell>\r\n      <TableCell align=\"center\">{props.item.price.toFixed(2)}$</TableCell>\r\n      <TableCell align=\"right\">\r\n        {loading ? (\r\n          <LoadingSpinner size=\"small\" />\r\n        ) : (\r\n          <Chip\r\n            label={`${currentPrice}%`}\r\n            size=\"small\"\r\n            color={\r\n              currentPrice > 0 ? \"success\" : currentPrice < 0 ? \"error\" : \"info\"\r\n            }\r\n          />\r\n        )}\r\n      </TableCell>\r\n      <TableCell align=\"center\">\r\n        <Button\r\n          size=\"small\"\r\n          onClick={authCtx.loadTradeScreen.bind(null, props.item.symbol)}\r\n        >\r\n          <DoubleArrowIcon size=\"small\" />\r\n        </Button>\r\n      </TableCell>\r\n    </TableRow>\r\n  );\r\n};\r\n\r\nexport default PortfolioItemMUI;\r\n",
  {
    "ruleId": "106",
    "replacedBy": "107"
  },
  {
    "ruleId": "108",
    "replacedBy": "109"
  },
  {
    "ruleId": "110",
    "severity": 1,
    "message": "111",
    "line": 52,
    "column": 6,
    "nodeType": "112",
    "endLine": 52,
    "endColumn": 21,
    "suggestions": "113"
  },
  {
    "ruleId": "110",
    "severity": 1,
    "message": "114",
    "line": 45,
    "column": 6,
    "nodeType": "112",
    "endLine": 45,
    "endColumn": 32,
    "suggestions": "115"
  },
  {
    "ruleId": "106",
    "replacedBy": "116"
  },
  {
    "ruleId": "108",
    "replacedBy": "117"
  },
  {
    "ruleId": "118",
    "severity": 1,
    "message": "119",
    "line": 1,
    "column": 39,
    "nodeType": "120",
    "messageId": "121",
    "endLine": 1,
    "endColumn": 48
  },
  {
    "ruleId": "118",
    "severity": 1,
    "message": "122",
    "line": 19,
    "column": 10,
    "nodeType": "120",
    "messageId": "121",
    "endLine": 19,
    "endColumn": 20
  },
  {
    "ruleId": "110",
    "severity": 1,
    "message": "123",
    "line": 58,
    "column": 6,
    "nodeType": "112",
    "endLine": 58,
    "endColumn": 30,
    "suggestions": "124"
  },
  {
    "ruleId": "118",
    "severity": 1,
    "message": "125",
    "line": 18,
    "column": 21,
    "nodeType": "120",
    "messageId": "121",
    "endLine": 18,
    "endColumn": 33
  },
  {
    "ruleId": "110",
    "severity": 1,
    "message": "126",
    "line": 23,
    "column": 6,
    "nodeType": "112",
    "endLine": 23,
    "endColumn": 8,
    "suggestions": "127"
  },
  {
    "ruleId": "110",
    "severity": 1,
    "message": "128",
    "line": 52,
    "column": 6,
    "nodeType": "112",
    "endLine": 52,
    "endColumn": 8,
    "suggestions": "129"
  },
  "no-native-reassign",
  [
    "130"
  ],
  "no-negated-in-lhs",
  [
    "131"
  ],
  "react-hooks/exhaustive-deps",
  "React Hook useEffect has a missing dependency: 'getQuote'. Either include it or remove the dependency array.",
  "ArrayExpression",
  [
    "132"
  ],
  "React Hook useEffect has a missing dependency: 'init'. Either include it or remove the dependency array.",
  [
    "133"
  ],
  [
    "130"
  ],
  [
    "131"
  ],
  "no-unused-vars",
  "'useEffect' is defined but never used.",
  "Identifier",
  "unusedVar",
  "'inputError' is assigned a value but never used.",
  "React Hook useEffect has missing dependencies: 'authCtx' and 'props.symbol'. Either include them or remove the dependency array.",
  [
    "134"
  ],
  "'setShowModal' is assigned a value but never used.",
  "React Hook useEffect has a missing dependency: 'authCtx.loadLeaderboard'. Either include it or remove the dependency array.",
  [
    "135"
  ],
  "React Hook useEffect has missing dependencies: 'currentSymbol' and 'getCurrentPrice'. Either include them or remove the dependency array.",
  [
    "136"
  ],
  "no-global-assign",
  "no-unsafe-negation",
  {
    "desc": "137",
    "fix": "138"
  },
  {
    "desc": "139",
    "fix": "140"
  },
  {
    "desc": "141",
    "fix": "142"
  },
  {
    "desc": "143",
    "fix": "144"
  },
  {
    "desc": "145",
    "fix": "146"
  },
  "Update the dependencies array to be: [currentSymbol, getQuote]",
  {
    "range": "147",
    "text": "148"
  },
  "Update the dependencies array to be: [authCtx.userData.balance, init]",
  {
    "range": "149",
    "text": "150"
  },
  "Update the dependencies array to be: [authCtx, authCtx.trading.symbol, props.symbol]",
  {
    "range": "151",
    "text": "152"
  },
  "Update the dependencies array to be: [authCtx.loadLeaderboard]",
  {
    "range": "153",
    "text": "154"
  },
  "Update the dependencies array to be: [currentSymbol, getCurrentPrice]",
  {
    "range": "155",
    "text": "156"
  },
  [
    1557,
    1572
  ],
  "[currentSymbol, getQuote]",
  [
    1709,
    1735
  ],
  "[authCtx.userData.balance, init]",
  [
    1313,
    1337
  ],
  "[authCtx, authCtx.trading.symbol, props.symbol]",
  [
    855,
    857
  ],
  "[authCtx.loadLeaderboard]",
  [
    1610,
    1612
  ],
  "[currentSymbol, getCurrentPrice]"
]
